// Code generated by mockery v2.12.2. DO NOT EDIT.

package memstore

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockBucket is an autogenerated mock type for the Bucket type
type MockBucket struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *MockBucket) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *MockBucket) Set(_a0 string, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// Values provides a mock function with given fields:
func (_m *MockBucket) Values() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// NewMockBucket creates a new instance of MockBucket. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBucket(t testing.TB) *MockBucket {
	mock := &MockBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
