// Code generated by mockery v2.12.2. DO NOT EDIT.

package terraform

import (
	mock "github.com/stretchr/testify/mock"
	cty "github.com/zclconf/go-cty/cty"

	providers "github.com/hashicorp/terraform/providers"

	testing "testing"
)

// MockTerraformProvider is an autogenerated mock type for the TerraformProvider type
type MockTerraformProvider struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields:
func (_m *MockTerraformProvider) Cleanup() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *MockTerraformProvider) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadResource provides a mock function with given fields: args
func (_m *MockTerraformProvider) ReadResource(args ReadResourceArgs) (*cty.Value, error) {
	ret := _m.Called(args)

	var r0 *cty.Value
	if rf, ok := ret.Get(0).(func(ReadResourceArgs) *cty.Value); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cty.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ReadResourceArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Schema provides a mock function with given fields:
func (_m *MockTerraformProvider) Schema() map[string]providers.Schema {
	ret := _m.Called()

	var r0 map[string]providers.Schema
	if rf, ok := ret.Get(0).(func() map[string]providers.Schema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]providers.Schema)
		}
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *MockTerraformProvider) Version() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockTerraformProvider creates a new instance of MockTerraformProvider. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerraformProvider(t testing.TB) *MockTerraformProvider {
	mock := &MockTerraformProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
